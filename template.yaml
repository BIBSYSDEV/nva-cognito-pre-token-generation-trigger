AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sample SAM Template for AWS

Metadata:
  AWS::ServerlessRepo::Application:
    Name: NvaCognitoPreTokenGenerationTrigger
    Description: NVA Cognito Pre Token Generation Trigger
    Author: Unit
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    Labels: ['${GIT_REPO}', '${CODEBUILD_RESOLVED_SOURCE_VERSION}', '@${BUILD_TIMESTAMP}']

Globals:
  Function:
    Timeout: 20

Parameters:
  CustomDomain:
    Type: String
    Description: Custom API to connect this lambda to
  UserServiceSecretName:
    Type: String
    Description: Name of the Secret for Users and Role Service
  UserServiceSecretKey:
    Type: String
    Description: Key in the Secret for Users and Role Service
  UserServiceSecretArn:
    Type: String
    Description: ARN to the Secret for Users and Role Service

Resources:
  
  TriggerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
        - PolicyName: AddUserToGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminUpdateUserAttributes
                Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'
        - PolicyName: GetSecretValue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref UserServiceSecretArn

  InvokePostAuthenticationTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PreTokenGenerationTrigger
      Principal: cognito-idp.amazonaws.com

  PreTokenGenerationTrigger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito-pre-token-generation
      Handler: no.unit.nva.cognito.PostAuthenticationHandler::handleRequest
      Runtime: java11
      Role: !GetAtt TriggerExecutionRole.Arn
      MemorySize: 1408
      Timeout: 10
      Environment:
        Variables:
          CUSTOMER_API_SCHEME: https
          CUSTOMER_API_HOST: !Ref CustomDomain
          USER_API_SCHEME: https
          USER_API_HOST: !Ref CustomDomain
          USER_SERVICE_SECRET_NAME: !Ref UserServiceSecretName
          USER_SERVICE_SECRET_KEY: !Ref UserServiceSecretKey

Outputs:
  CognitoPreTokenGenerationFunction:
    Description: ARN Identifier of the PreTokenGenerationTrigger
    Value: !GetAtt PreTokenGenerationTrigger.Arn
    Export:
      Name: CognitoPreTokenGenerationFunctionArn
